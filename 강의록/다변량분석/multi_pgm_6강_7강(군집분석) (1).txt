# chap4 군집분석

# R 4.1
beer = read.csv("c:/data/mva/beerbrand.csv", header=T, row.names=1)
head(beer)
summary(beer)

# R 4.2
zbeer = scale(beer)
round(apply(zbeer, 2, mean), 3)
round(apply(zbeer, 2, sd), 3)

# R 4.3
zbeer_euc = dist(zbeer)
zbeer_euc[1]
zbeer_man = dist(zbeer, "manhattan")
zbeer_man[1]

# R 4.4
hc_s = hclust(zbeer_euc, method='single')
hc_s
plot(hc_s, hang=-1)

# R 4.5
hc_c = hclust(zbeer_euc, method='complete')
hc_c
plot(hc_c, hang=-1)

# R 4.6
hc_cen = hclust(zbeer_euc, method="centroid")
hc_cen
plot(hc_cen, hang=-1)


# R 4.7
hc_w = hclust(zbeer_euc, method="ward.D")
hc_w
plot(hc_w, hang=-1)

# R 4.8
hc_cen24 = cutree(hc_cen, 2:4)
hc_cen24

# R 4.9
kmc = kmeans(zbeer, centers=2)
kmc

# R 4.10
plot(zbeer, col=kmc$cluster, pch=16)

# R 4.11
pairs(zbeer, col=kmc$cluster, pch=16, cex.labels=1.5)

# R 4.12
head(USArrests)
summary(USArrests)
zUSArrests=scale(USArrests)

# R 4.13
hc_a = hclust(dist(zUSArrests), method="average")
hc_a
plot(hc_a, hang=-1) 

# R 4.14
hcmember <- cutree(hc_a, k=5)
hc_member

# R 4.15
data_combined = cbind(USArrests, hcmember)
aggregate(.~hcmember, data_combined, mean)

# R 4.16
zUSArrests = scale(USArrests)
kmc1 = kmeans(zUSArrests, 4)
kmc1

# R 4.17
pairs(USArrests, col=kmc1$cluster, pch=16, cex.labels=1.5)

#Py 4.1
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# 데이터 읽기
beer = pd.read_csv("c:/data/mva/beerbrand.csv", index_col='name')
beer.head()

# 기술통계량 구하기
beer.describe()

# 표준화 패키기 불러오기
from sklearn.preprocessing import StandardScaler
# 표준화 시행
zbeer = StandardScaler().fit_transform(beer)

# Py 4.2
# 패키지 불러오기
import scipy.cluster.hierarchy as sch
# 계층적 군집분석 시행하기: 최단연결법
slink = sch.linkage(zbeer, 'single')
# method = 'single', 'complete', 'average', 'median', 'ward'
# 덴드로그램 그리기
plt.figure(figsize=(7,5))
sch.dendrogram(slink,  leaf_rotation=80,  leaf_font_size=10,  labels = beer.index)
plt.title("Dendrogram of Single linkage")
plt.show()

# Py 4.3
# 계층적 군집분석 시행: 와드의 방법
wlink = sch.linkage(zbeer, 'ward')
plt.figure(figsize=(7,5))
sch.dendrogram(wlink,  leaf_rotation=80,  leaf_font_size=10,  labels=beer.index )
plt.title("Dendrogram of Ward's method")
plt.show()

# Py 4.4# 계층적 군집분석: 중심연결법
clink = sch.linkage(zbeer, 'centroid')
# 덴드로그램 그리기
plt.figure(figsize=(7,5))
sch.dendrogram(clink,  leaf_rotation=80,  leaf_font_size=10,  labels = beer.index )
plt.title("Dendrogram of Centroid linkage")
plt.show() 

# Py 4.5
from sklearn.cluster import AgglomerativeClustering
# help(AgglomerativeClustering): 클래스 코드 보기
# 계층적 군집분석: ward 방법
wcluster = AgglomerativeClustering(n_clusters=4, affinity='euclidean',
 linkage='ward')
# linkage: {"ward", "complete", "average", "single"}, default="ward"
# 소속군집
member = wcluster.fit_predict(zbeer)
member

# 군집별 평균계산
member1 = pd.DataFrame(member, columns=['cluster'], index=beer.index)
data_combined = beer.join(member1)
data_combined.groupby('cluster').mean()

# Py 4.6
# K-means 군집분석
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
# 표준화
zbeer = StandardScaler().fit_transform(beer)
# k-평균 군집분석: 군집수 = 2
kmc = KMeans(n_clusters=2)
kmc.fit(zbeer)

# 군집 중심 알기
kmc.cluster_centers_
# 소속군집 알기
kmc.labels_

# Py 4.7
# 소속 군집 산점도
plt.figure(figsize=(5,5))
plt.scatter(x=beer['calories'], y=beer['sodium'], c=kmc.labels_)
plt.show()



